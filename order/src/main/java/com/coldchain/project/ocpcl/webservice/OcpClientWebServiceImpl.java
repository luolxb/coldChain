
package com.coldchain.project.ocpcl.webservice;

import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 */
@WebServiceClient(name = "ProvisioningService_v1_0", targetNamespace = "http://www.orbcomm.com/wsdl/OrbcommProvisioning-v1", wsdlLocation = "https://ows.orbcomm.net/provisioning/api?wsdl")
public class OcpClientWebServiceImpl extends Service {

    private final static URL PROVISIONINGSERVICEV10_WSDL_LOCATION;
    private final static WebServiceException PROVISIONINGSERVICEV10_EXCEPTION;
    private final static QName PROVISIONINGSERVICEV10_QNAME = new QName("http://www.orbcomm.com/wsdl/OrbcommProvisioning-v1", "ProvisioningService_v1_0");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("https://ows.orbcomm.net/provisioning/api?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        PROVISIONINGSERVICEV10_WSDL_LOCATION = url;
        PROVISIONINGSERVICEV10_EXCEPTION = e;
    }

    private volatile static OcpClientWebServiceImpl instance = null;

    public static OcpClientWebServiceImpl getInstance() {
        if (instance == null) {
            synchronized (OcpClientWebServiceImpl.class) {
                if (instance == null) {
                    instance = new OcpClientWebServiceImpl();
                }
            }

        }
        return instance;
    }

    private OcpClientWebServiceImpl() {
        super(__getWsdlLocation(), PROVISIONINGSERVICEV10_QNAME);
    }

    public OcpClientWebServiceImpl(WebServiceFeature... features) {
        super(__getWsdlLocation(), PROVISIONINGSERVICEV10_QNAME, features);
    }

    public OcpClientWebServiceImpl(URL wsdlLocation) {
        super(wsdlLocation, PROVISIONINGSERVICEV10_QNAME);
    }

    public OcpClientWebServiceImpl(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, PROVISIONINGSERVICEV10_QNAME, features);
    }

    public OcpClientWebServiceImpl(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OcpClientWebServiceImpl(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * @return returns OcpClientWebService
     */
    @WebEndpoint(name = "ProvisioningServiceHttpPort")
    public OcpClientWebService getProvisioningServiceHttpPort() {
        return super.getPort(new QName("http://www.orbcomm.com/wsdl/OrbcommProvisioning-v1", "ProvisioningServiceHttpPort"), OcpClientWebService.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns OcpClientWebService
     */
    @WebEndpoint(name = "ProvisioningServiceHttpPort")
    public OcpClientWebService getProvisioningServiceHttpPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.orbcomm.com/wsdl/OrbcommProvisioning-v1", "ProvisioningServiceHttpPort"), OcpClientWebService.class, features);
    }

    private static URL __getWsdlLocation() {
        if (PROVISIONINGSERVICEV10_EXCEPTION != null) {
            throw PROVISIONINGSERVICEV10_EXCEPTION;
        }
        return PROVISIONINGSERVICEV10_WSDL_LOCATION;
    }

}
